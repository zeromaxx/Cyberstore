@model Eshop.ViewModels.ConnectionViewModel
@using Eshop.ViewModels
@{
    ViewBag.Title = "AdminSupport";
    string userNameZor = null;
    string username = null;
    var data = @TempData["msg"];
    string notification = null;
    int customerUserid = 0;
    int adminid = 0;

    string emailNotified = null;
    string userNameNotified = null;

}



@if (User.Identity.IsAuthenticated)
{

    using (Entities en = new Entities())
    {
        var userEmail = User.Identity.Name;
        var user = en.Users.Single(u => u.Email == userEmail);

        if (User.IsInRole("Admin"))
        {

            userNameZor = User.Identity.Name;

            var userDb = en.Users.FirstOrDefault(u => u.Email == userNameZor);
            int userDbId = userDb.UserId;
            var conn = en.Connections.FirstOrDefault(u => u.AdminId == userDbId);

            if (conn != null)
            {
                var userId = conn.UserId;
                var userN = en.Users.FirstOrDefault(u => u.UserId == userId);
                userNameZor = userN.Email;
                username = userDb.Username;
                adminid = userDb.UserId;
            }


        }
        if (User.IsInRole("Customer"))
        {
            userNameZor = User.Identity.Name;

            var userDb = en.Users.FirstOrDefault(u => u.Email == userNameZor);
            int userAdminId = userDb.UserId;
            var conn = en.Connections.FirstOrDefault(u => u.UserId == userAdminId);

            if (conn != null)
            {
                var adminId = conn.AdminId;
                var admin = en.Users.FirstOrDefault(u => u.UserId == adminId);
                userNameZor = admin.Email;
                username = userDb.Username;
                customerUserid = userDb.UserId;
            }


        }

        <div class="wallpaper-container">
            <img src="~/Images/Icons/banner.jpg" alt="wallpaper" />
            <div class="wallpaper-heading">
                <h1>Contact</h1>
                <h4>Home/Contact</h4>
            </div>
        </div>

        <div class="contact-us-container">
            <div class="contact-us-info">
                <div class="contact-us-map">
                    <iframe src="https://www.google.com/maps/embed?pb=!1m18!1m12!1m3!1d3144.871050687113!2d23.73012505840785!3d37.98013853466675!2m3!1f0!2f0!3f0!3m2!1i1024!2i768!4f13.1!3m3!1m2!1s0x14a1bd1d0537ed91%3A0xd71dcf7d2b435255!2sPeopleCert!5e0!3m2!1sel!2sgr!4v1662875073045!5m2!1sel!2sgr"
                            width="100%" height="350" style="border:0;" allowfullscreen="" loading="lazy"
                            referrerpolicy="no-referrer-when-downgrade"></iframe>
                </div>

                <div class="contact-details">
                    <h4>Contact Details</h4>
                    <p>1-677-124-447</p>
                    <p>184 Main Street West Victoria </p>
                </div>
                <div class="contact-us-opening-hours">
                    <h4>Opening Hours</h4>
                    <p>Monday to Friday: 9am-9pm</p>
                    <p>Saturday to Sunday: 9am-10pm</p>
                </div>


            </div>
            <div>

                <div class="contact-us-form-container">
                    <h2>Leave Us a Message</h2>
                    <p>Your email address will not be published. Required fields are marked *</p>
                    @using (Html.BeginForm("ContactForm", "Home", FormMethod.Post, new { id = "checkout-form" }))
                    {
                        @Html.AntiForgeryToken()
                        @Html.ValidationSummary(true, "", new { @class = "text-danger" })

                        @Html.LabelFor(model => model.FirstName)
                        @Html.EditorFor(model => model.FirstName, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.FirstName, "", new { @class = "text-danger" })

                        @Html.LabelFor(model => model.LastName)
                        @Html.EditorFor(model => model.LastName, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.LastName, "", new { @class = "text-danger" })

                        @Html.LabelFor(model => model.Email)
                        @Html.EditorFor(model => model.Email, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })

                        if (data != null)
                        {
                            <span style="color:red;">@TempData["msg"].ToString()</span>
                        }

                        <label for="Subject">Subject</label>
                        @Html.EditorFor(model => model.Inquiry, new { htmlAttributes = new { @class = "input-enquiry" } })
                        @Html.ValidationMessageFor(model => model.Inquiry, "", new { @class = "text-danger" })

                        <input type="submit" value="Send Message" />
                        @Html.HiddenFor(m => m.UserId)
                    }

                </div>

                <div id="Botif" class="notificationClass"></div>
                <div id="Notif" class="notificationClass"></div>



            </div>
        </div>

        if (User.IsInRole("Admin"))
        {
            <div class="svg-messenger-icon3" id="svg3">
                @Html.ActionLink("Complete Support", "CompleteConnection", "Home", null,
            new { @class = "register-complete-btn2" })
            </div>
        }

        <div style="z-index:300;" id="detailsDiv" class="@userNameZor">

            <div name="CustomerSupportChat">

                <div class="chat-bot">

                    <div class="chat-bot-container">

                        <form method="post" id="content">
                        </form>
                        <div class="chat-bot-container-header">
                            <img src="~/Images/Other/face.jpg" alt="" />
                            <div class="chat-bot-container-header-text">
                                <h4>Wheatley (bot assistant)</h4>
                                <div class="chat-bot-container-header-text-1">
                                    <span></span>
                                    <h5>Active</h5>
                                    <div class="chat-bubble">
                                        <div class="typing">
                                            <div class="dot"></div>
                                            <div class="dot"></div>
                                            <div class="dot"></div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <div id="discussion" class="chatbot-text-area">
                            @*<div id="discussion">
                                </div>*@
                        </div>

                        <div class="sendmsgparent chat-bot-footer">
                            <textarea id="msgarea" class="@username" name="textArea"></textarea>

                            <button id="sendmsg" class="@userNameZor">Send</button>
                        </div>
                    </div>

                </div>

            </div>

        </div>
        bool toCheck = false;
        var connections = en.Connections.ToList();
        var currentConnection = new Connection();
        foreach (var con in connections)
        {
            if ((con.UserId == customerUserid || con.AdminId == adminid) && con.Status == "Pending")
            {
                toCheck = true;
            }
        }
        if (toCheck == true)
        {

            <div>
                @*<img class="svg-messenger-icon2" src="~/Images/bubble.png" />*@
                <h1 style="font-size:small;right:1%;bottom:-3%;" class="message-in-svg-messenger-icon2">
                    <strong><bolt>All our live representatives </bolt><br />are occupied. </strong>
                    <em><br /><br />-Please try later<br />&nbsp;&nbsp;&nbsp;or Contact us via email</em>
                </h1>
            </div>

        }
        if (toCheck == false)
        {
            <div id="messageOnLoadHide">
                <img class="svg-messenger-icon2" src="~/Images/bubble.png" />
                <h1 class="message-in-svg-messenger-icon2">
                    <strong><bolt>Need Live Support?</bolt><br />Over here! </strong>
                    <em><br /><br />-Only during<br /> &nbsp;&nbsp;&nbsp;opening hours</em>
                </h1>
            </div>


            <img class="svg-messenger-icon" id="svg" src="~/Images/Other/face.jpg" />
        }

    }
}


@{
    string email = null;
    if (User.Identity.IsAuthenticated)
    {

        email = User.Identity.Name.ToString();
    }


}



@section scripts{

    <script src="~/Scripts/jquery-3.4.1.min.js"></script>
    <script src="~/Scripts/jquery.signalR-2.2.1.min.js"></script>
    <script src="/signalr/hubs"></script>
    @Scripts.Render("~/bundles/jqueryval")




    <script>
        const openChat = document.querySelector('.svg-messenger-icon');
        const chatBox = document.querySelector('.chat-bot-container');
        openChat.addEventListener('click', () => {
            chatBox.classList.toggle('show-chat-bot-container');
            setTimeout(() => { chatBox.classList.toggle('show-chat-bot-container'); }, 30000);
        })


    </script>



    <script>
        $(document).ready(function () {

            $('div#messageOnLoadHide').delay(5000).fadeOut();

            document.addEventListener('DOMContentLoaded', function () {
                if (Notification.permission !== "granted") {
                    Notification.requestPermission();
                }
            });

            /* DISABLING THE CHAT HERE IF USER JUST JOINED*/

            var userNameZor = $('#sendmsg').attr('class');

           /* IF TO REFACTOR HERE ADD EMAIL DIFRNTLY*/
            if (userNameZor === "hxo999@yahoo.gr" || userNameZor ==="zeromixer2010@yahoo.com" || userNameZor === "thestas@yahoo.com" || userNameZor === "alexmantzaris.kar@gmail.com" || userNameZor === "tasosadam1991@gmail.com") {
          $('#discussion').append(`<div class="chatbox-message">
             <h5>Automated Message</h5><span>@DateTime.Now.ToString()</span>
             <p> Please wait. . . While a <br>representative joins <br>the chat</p>
                        </div>`);

                    $("#msgarea").prop('disabled', true);
                    $("#sendmsg").prop('disabled', true);

                }


            var hub = $.connection.echo;

          /*  var ClassOfOppositeUser = $('#sendmsg').attr('class');*/
            var userNameZor = $('#detailsDiv').attr('class');  /*GETING USER HERE BY DIV NEXT TO SEND MSG DIV*/
            @using(Entities en = new Entities())
            {
                if (!User.IsInRole("Admin"))
                {
                    notification ="Notificatio";

                    emailNotified = User.Identity.Name;

                    var userDb = en.Users.FirstOrDefault(u => u.Email == userNameZor);
                    int userDbId = userDb.UserId;
                    var conn = en.Connections.FirstOrDefault(u => u.AdminId == userDbId);

                    if (conn != null)
                    {
                        var userId = conn.UserId;
                        var userN = en.Users.FirstOrDefault(u => u.UserId == userId);
                        emailNotified = userN.Email;
                        userNameNotified = userDb.Username;
                    }

                }
                if (!User.IsInRole("Customer"))
                {
                    notification ="Botificatio";

                    emailNotified = User.Identity.Name;

                    var userDb = en.Users.FirstOrDefault(u => u.Email == userNameZor);
                    int userAdminId = userDb.UserId;
                    var conn = en.Connections.FirstOrDefault(u => u.UserId == userAdminId);

                    if (conn != null)
                    {
                        var adminId = conn.AdminId;
                        var admin = en.Users.FirstOrDefault(u => u.UserId == adminId);
                        emailNotified = admin.Email;
                        userNameNotified = userDb.Username;
                    }
                }
            }


            hub.client.receiveNotification = function (name, message) {

                    var encodedMsg = $('<div/>').text(message).html();
                    var encodedName = $('<div/>').text(name).html();

                              $('#discussion').append(`<div class="chatbox-message">
                            <h5>${encodedName}</h5><span>@DateTime.Now.ToString()</span>
                                <p>${encodedMsg}</p>
                        </div>`);
                          $("#msgarea").prop('disabled', false);
                      $("#sendmsg").prop('disabled', false);

                      $('div.chatbot-text-area').scrollTop($('div.chatbot-text-area')[0].scrollHeight)
                doSomething();



                if ('@notification' == "Notificatio") {
                    if (name == "@userNameNotified") {
                        $("#Notif").append(`<div id="divInNotif" class="chatbox-message2" style="border:solid;border-color:#e0fbfc!important;border-size:5px;margin-bottom:10px;background-color:#2196F3!important;color:white">
                       <span>You have a message from our<br> support team.</span>
                     </div>`);
                    }

                }
                if ('@notification' == "Botificatio") {
                    if (name == "@userNameNotified") {
                             $("#Botif").append(`<div id="divInNotif" class="chatbox-message2" style="border:solid;border-color:#e0fbfc!important;border-size:5px;margin-bottom:10px;background-color:#2196F3!important;color:white">
                       <span>You have a message from <br> ${userNameZor}.</span>
                     </div>`);
                    }

                }




                setTimeout(function () {
                    $('#divInNotif').fadeOut(300, function () {
                        $('#divInNotif').remove();
                    });
                }, 6700);
                /*   $('#Notificatio').remove();*/


                document.getElementById('svg').classList.add('redImg');
                const red = document.querySelector('.redImg');

                red.classList.remove('.svg-messenger-icon');
                setTimeout(function () {

                    $("#svg").removeClass("redImg");
                        document.getElementById('svg').classList.add('svg-messenger-icon');

                }, 8000);



                }





    $("body").on("click", "span.msgnotif.red", function () {

        $("ul#msgnotiful").empty();

        var url = "/Signlr/DisplayUnreadMessages";

        $.post(url, {}, function (data) {

            if (data.length > 0) {
                $("ul#msgnotiful").append("<li class=close>x</li>");
            }

            for (var i = 0; i < data.length; i++) {
                var obj = data[i];

                $("ul#msgnotiful").append('<li class=msgnotifli><a href="/' + obj.FromUsername + '"><img src="uploads/' + obj.FromId + '.jpg" /></a>' + ' ' + obj.Message + '</li>');
            }

        }).done(function () {
           /* hub.server.notifyOfMessageOwner();*/
        });

    });

    $("body").on("click", "ul#msgnotiful li.close", function () {
        $("ul#msgnotiful").empty();
    });



            @*//hub.client.msgcount = function (username, count) {

    //    if (count > 0) {
    //        $("span.msgnotif." + username + "> span").text(count);
    //        $("span.msgnotif." + username).addClass("red");
    //    } else {
    //        $("span.msgnotif." + username + "> span").text("");
    //        $("span.msgnotif." + username).removeClass("red");
    //    }

    //}*@


                $.connection.hub
                            .start()
                            .done(function () {



                                $("body").on("click", "button#sendmsg", function (e) {
                                    e.preventDefault();
                                    let text_area_data = $('textarea[name="textArea"]').val();
                                    console.log(text_area_data);

                                    var $this = $(this);
                                    var _friend = userNameZor;

                                    var message = text_area_data;
                                    var url = "/Home/SendMessage";

                                    $.post(url, { friend: _friend, message: message }, function (data) {

                                    }).done(function () {
                                        console.log('after post');
                                        hub.server.hello('@username', message);

                                        /*  hub.server.notifyOfMessage(_friend);*/
                                        $("#msgarea").val("");
                                        $this.parent().find(".sendmsgnotif").removeClass("hide");
                                        setTimeout(function () {
                                            $this.parent().find(".sendmsgnotif").fadeOut("fast", function () {
                                                $this.parent().find(".sendmsgnotif").addClass("hide");
                                                console.log('after message append');
                                            });
                                        }, 2000);
                                    });
                                });

                $("body").on("click", "span.msgnotif.red", function () {

                    $("ul#msgnotiful").empty();

                    var url = '@Url.Action("DisplayUnreadMessages", "Home")';

                    $.post(url, {}, function (data) {

                        if (data.length > 0) {
                            $("ul#msgnotiful").append("<li class=close>x</li>");
                        }

                        for (var i = 0; i < data.length; i++) {
                            var obj = data[i];

                            $("ul#msgnotiful").append('<li class=msgnotifli><a href="/' + obj.FromUsername + '"></a>' + ' ' + obj.Message + '</li>');
                        }

                    }).done(function () {
                        hub.server.notifyOfMessageOwner();
                    });

                });

                $("body").on("click", "ul#msgnotiful li.close", function () {
                    $("ul#msgnotiful").empty();
                });

            });

        function htmlEncode(value) {
            var encodedValue = $('<div />').text(value).html();
            return encodedValue;
        }// End ready




        /*     $this.parent().find("img").removeClass("hide");*/





                //hub.client.updatechat = function (user, data) {
                //    var result = JSON.parse(data);

                //    $(".chat." + user + "> ul").empty();

                //    for (var i = 0; i < result.length; i++) {
                //        var obj = result[i];

                //        $(".chat." + user + "> ul").append('<li class="cf' + obj.id + '" data-id="' + obj.id + '"><img src="uploads/' + obj.id + '.jpg" /> ' + obj.friend + '</li>');

                //        if (!($(".chatboxholder #cb" + obj.id).length)) {

                //            var chatbox = $("body > .chatbox").clone();

                //            chatbox.attr("data-id", obj.id);
                //            chatbox.attr("id", "cb" + obj.id);
                //            chatbox.addClass("hidden");

                //            chatbox.find("a.sendchat").attr("data-friend", obj.friend);
                //            chatbox.find("a.sendchat").attr("data-id", obj.id);
                //            chatbox.find("div.chatboxtext").attr("id", "cbtext" + obj.id);

                //            $("#chb" + user).append(chatbox);
                //            $("#chb" + user + " #cb" + obj.id + " h4 > span").html('<img src="uploads/' + obj.id + '.jpg" />');

                //        }

                //    }

                //}

                //hub.client.sendchat = function (userId, user, friendId, friendUsername, message) {

                //    var a = $("#chb" + user + " div#cb" + friendId + " .chatboxtext");
                //    a.append("<img src=uploads/" + userId + ".jpg /> " + message + "<br />");

                //    a.scrollTop(a.prop("scrollHeight"));

                //    if ($("#chb" + friendUsername + " div#cb" + userId).hasClass("hidden")) {
                //        $('li.cf' + userId).addClass("msg");
                //    }

                //    var b = $("#chb" + friendUsername + " div#cb" + userId + " .chatboxtext");
                //    b.append("<img src=uploads/" + userId + ".jpg /> " + message + "<br />");

                //    b.scrollTop(b.prop("scrollHeight"));

                //}



                /*
             / Display unread messages
             */

                //$("body").on("click", "a.sendchat", function (e) {
                //    e.preventDefault();

                //    var $this = $(this);

                //    var friendId = $this.data("id");
                //    var friendUsername = $this.data("friend");
                //    var message = $this.parent().find("textarea").val();

                //    $this.parent().find("textarea").val("");

                //    hub.server.sendChat(friendId, friendUsername, message);

                //});


                //$("body").on("keypress", ".chatbox textarea", function (e) {
                //    if (e.which == 13) {
                //        $(this).parent().find("a.sendchat").click();
                //        setTimeout(function () {
                //            $(this).parent().find("textarea").focus();
                //        }, 0);
                //    }

                //});

            });


        /*
/ Open chat box
*/

                //$("body").on("click", ".chat ul li", function () {

                //    var $this = $(this);

                //    if ($this.hasClass("msg")) $this.removeClass("msg");

                //    var friend = $this.text().trim();

                //    var chatboxNumber = $(".chatboxholder .chatbox:not(.hidden)").length;

                //    var id = $this.data("id");

                //    var right = 320;

                //    var cb = $(".chatboxholder #cb" + id);

                //    if (!cb.length) {
                //        cb.css("right", right * chatboxNumber);
                //    } else if (cb.hasClass("hidden")) {
                //        cb.removeClass("hidden");
                //        cb.css("right", right * chatboxNumber);
                //    } else {
                //        cb.addClass("hidden");
                //        cb.css("right", right * chatboxNumber);
                //    }

                //});
    </script>
    <script>
        // (A) FLAG FOR "ALREADY CLICKED".
        var clicked = false;

        // (B) FUNCTION - WILL ONLY RUN IF NOT CLICKED
        function doSomething() {

            if (!clicked) {
                // (B1) SET CLICKED TO TRUE
                clicked = true;
                chatBox.classList.toggle('show-chat-bot-container');
                // (B2) DO YOUR PROCESSING HERE

                //$('#Notificatio').append(`<div class="chatbox-message">
                //         <h5>${username}</h5><span>You have a message from our support team: </span>
                //             <p>${message}</p>
                //     </div>`);
                // (B3) RE-ENABLE AFTER PROCESSING IF YOU WANT
                // clicked = false;
            }
        }
    </script>

    <script>
        function sleep(milliseconds) {
            const date = Date.now();
            let currentDate = null;
            do {
                currentDate = Date.now();
            } while (currentDate - date < milliseconds);
        }
    </script>
    @*<script>
            $(function () {
                // Reference the auto-generated proxy for the hub.
                var chat = $.connection.chathub;
                // Create a function that the hub can call back to display messages.
                chat.client.addNewMessageToPage = function (name, message) {
                    // Add the message to the page.
                    $('#discussion').append('<li><strong>' + htmlEncode(name)
                        + '</strong>: ' + htmlEncode(message) + '</li>');
                };
                // Get the user name and store it to prepend to messages.
                $('#displayname').val(prompt('Enter your name:', ''));
                // Set initial focus to message input box.
                $('#message').focus();
                // Start the connection.
                $.connection.hub.start().done(function () {
                    $('#sendmessage').click(function () {
                        // Call the Send method on the hub.
                        chat.server.send($('#displayname').val(), $('#message').val());
                        // Clear text box and reset focus for next comment.
                        $('#message').val('').focus();
                    });
                });
            });
            // This optional function html-encodes messages for display in the page.
            function htmlEncode(value) {
                var encodedValue = $('<div />').text(value).html();
                return encodedValue;
            }
        </script>*@
}



@*$("body").on("click", "#sendmsg", function (e) {
                                  e.preventDefault();

                                  var $this = $(this);

                                  $this.parent().find("img").removeClass("hide");



                        $.post(url, { friend: _friend, message: _message }, function (data) {
                                  }).done(function () {

                        // Get the user name and store it to prepend to messages.

                        // Set initial focus to message input box.
                        $('#msgarea').focus();
                        // Start the connection.
                        $.connection.hub.start().done(function () {
                            $('#sendmsg').click(function () {
                                // Call the Send method on the hub.
                                hun.server.Hello($('@userName').val(), $('#msgarea').val());
                                // Clear text box and reset focus for next comment.
                                $('#msgarea').val('').focus();
                            });
                        });

                       });


                        // This optional function html-encodes messages for display in the page.
                        function htmlEncode(value) {
                            var encodedValue = $('<div />').text(value).html();
                            return encodedValue;
                        }


                    });
          });
    });*@




@*name = @userName;
    message = _message;
    $('#chat').append('<div><strong>' + htmlEncode(name)
        + '</strong>: ' + htmlEncode(message) + '</div>');*@


